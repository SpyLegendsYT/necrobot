#!/usr/bin/python3.6
import discord
from discord.ext import commands

from rings.utils.utils import has_perms, react_menu
from rings.utils.var import var

import ast
import time
from datetime import timedelta


class Support():
    """All the NecroBot support commands are here to help you enjoy your time with NecroBot """
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(aliases=["support"])
    async def about(self, ctx):
        """Creates a rich embed of the bot's details Also contains link for inviting and support server.

        {usage}"""

        embed = discord.Embed(title="__**NecroBot**__", colour=discord.Colour(0x277b0), description=self.bot.t(ctx, "bot-description"))
        embed.set_footer(text=self.bot.t(ctx, 'generated-necrobot'), icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        embed.add_field(name=self.bot.t(ctx, 'version'), value=self.bot.version)
        embed.add_field(name=self.bot.t(ctx, 'about'), value=self.bot.t(ctx, 'about-message').format(len(list(self.bot.guilds)), len(list(self.bot.users))))
        uptime = str(timedelta(seconds=time.time() - self.bot.uptime_start)).partition(".")[0].replace(":", "{}")
        embed.add_field(name=self.bot.t(ctx, 'uptime'), value=uptime.format("hours, ", "minutes and ") + "seconds")
        embed.add_field(name=self.bot.t(ctx, 'Links'), value=f"[{self.bot.t(ctx, 'invite-message')}]({discord.utils.oauth_url(self.bot.user.id, discord.Permissions(permissions=403172599))}) - [{self.bot.t(ctx, 'get-help')}](https://discord.gg/Ape8bZt)", inline=False)
        await ctx.send(embed=embed)

    @commands.command()
    async def report(self, ctx, *, message):
        """Report a bug with the bot or send a suggestion . Please be a specific as you can. Any abusive use will result in
        blacklisting.

        {usage}

        __Examples__
        `{pre}report profile while using profile the picture came out wrong, it was all distorted and stuff and my data on it was wrong.` - report 
        a bug for `profile`
        `{pre}report settings while using the sub-command mute it told me there was no such role when there is indeed` - report a bug for 
        `settings`"""

        embed = discord.Embed(title=":bulb: A report has just came in :bulb:", description=message, colour=discord.Colour(0x277b0))
        embed.set_footer(text="Generated by Necrobot", icon_url=self.bot.user.avatar_url_as(format="png", size=128))
        embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar_url)
        embed.add_field(name="Helpful Info", value=f"User: {ctx.author.mention} \nServer: {ctx.guild.name} \nServer ID: {ctx.guild.id}")
        await self.bot.get_channel(398894681901236236).send(embed=embed)
        await ctx.send(f":white_check_mark: | {self.bot.t(ctx, 'report-sent')}")

    @commands.group(invoke_without_command=True)
    async def news(self, ctx, index : int = 1):
        """See the latest necrobot news

        {usage}

        __Examples__
        `{pre}news` - get the news starting from the latest
        `{pre}news 4` - get the news starting from the fourth item
        `{pre}news 1` - get the news starting from the first item"""
        news = self.bot.settings["news"]

        if not news:
            await ctx.send(f":negative_squared_cross_mark: | {self.bot.t(ctx, 'news-empty')}")
            return

        if 0 >= index > len(news):
            await ctx.send(f":negative_squared_cross_mark: | {self.bot.t(ctx, 'news-invalid').format(len(news))}")
            return
        
        def _embed_generator(page):
            return discord.Embed.from_data(news[page])

        await react_menu(ctx, len(news) - 1, _embed_generator, index-1)

    @news.command("add")
    @has_perms(6)
    async def news_add(self, ctx, *, news : str):
        """Add a new news item

        {usage}"""
        try:
            news = ast.literal_eval(news)
        except ValueError as e:
            await ctx.send(str(e))
            return

        base_d = {
            "author": {
                "name": "Necrobot's Anchorman", "url": "https://discord.gg/Ape8bZt", 
                "icon_url": self.bot.user.avatar_url_as(format="png", size=128)
            }, 
            "color": 161712, "type": "rich"
        }
        news_e = {**news , **base_d}
        embed = discord.Embed.from_data(news_e)
        msg = await ctx.send(embed=embed)
        await msg.add_reaction("\N{WHITE HEAVY CHECK MARK}")
        await msg.add_reaction("\N{NEGATIVE SQUARED CROSS MARK}")

        def check(reaction, user):
            return user == ctx.author and reaction.emoji in ["\N{NEGATIVE SQUARED CROSS MARK}", "\N{WHITE HEAVY CHECK MARK}"] and msg.id == reaction.message.id

        reaction, _ = await self.bot.wait_for("reaction_add", check=check)

        if reaction.emoji == "\N{WHITE HEAVY CHECK MARK}":
            self.bot.settings["news"] = [news, *self.bot.settings["news"]]
            await ctx.send(f":white_check_mark: | Added **{news['title']}** news")
            channel = self.bot.get_channel(436595183010709514)
            await channel.send(embed=embed)

        await msg.clear_reactions()


    @news.command("delete")
    @has_perms(6)
    async def news_delete(self, ctx, index : int):
        """Remove a news item

        {usage}"""
        if not self.bot.settings["news"]:
            await ctx.send(":negative_squared_cross_mark: | No news available")
            return

        if not 0 <= index < len(self.bot.settings["news"]):
            await ctx.send(f":negative_squared_cross_mark: | Not a valid index, pick a number between 1 and {len(self.bot.settings['news'])}")
            return

        news = self.bot.settings["news"].pop(index)
        await ctx.send(f":white_check_mark: | News **{news['title']}** removed")

    @news.command("raw")
    @has_perms(6)
    async def news_raw(self, ctx, index : int):
        """Get the raw dict form of the news

        {usage}"""
        await ctx.send(self.bot.settings["news"][index])

    @news.command("template")
    @has_perms(6)
    async def news_template(self, ctx):
        """Prints the template for news

        {usage}"""
        await ctx.send('{ "fields": [{"inline": False, "name": "Why is good 1", "value": "Because"}], "description": "", "title": ""}')

    @commands.command()
    async def tutorial(self, ctx):
        """Sends an embed with helpful information on Necrobot's features, be warned, it is quite a dense text blob

        {usage}"""
        try:
            tutorial_e = discord.Embed.from_data(var[self.bot.server_data[guild.id]["language"]].tutorial_e)
            await ctx.author.send(embed=tutorial_e)
        except discord.errors.Forbidden:
            await ctx.send(f":negative_squared_cross_mark: | {self.bot.t(ctx, "priv-msg-disabled")}")

def setup(bot):
    bot.add_cog(Support(bot))
